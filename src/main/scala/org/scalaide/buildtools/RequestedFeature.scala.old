package org.scalaide.buildtools

import java.io.File
import scala.annotation.tailrec

object RequestedFeatureOld {
//  import Ecosystem._

//  // regex for the feature config file
//  private val ConfigCategory = "category=(.*)".r
//  private val ConfigSource = "source=(.*)".r
//  private val ConfigRepository = "repository=(.*)".r
//
//  def parseConfigFiles(baseFolder: File): Either[String, List[RequestedFeatureOld]] = {
//    if (baseFolder.exists && baseFolder.isDirectory()) {
//      parseConfigFiles(baseFolder.listFiles())
//    } else {
//      Left("%s doesn't exist or is not a directory".format(baseFolder))
//    }
//  }
//
//  private def parseConfigFiles(files: Array[File]): Either[String, List[RequestedFeatureOld]] = {
////    @tailrec
////    def loop(files: List[File], features: List[RequestedFeatureOld]): Either[String, List[RequestedFeatureOld]] = {
////      files match {
////        case Nil =>
////          Right(features)
////        case head :: tail =>
////          parseConfigFile(head) match {
////            case Right(feature) =>
////              loop(tail, features :+ feature)
////            case Left(error) =>
////              Left(error)
////          }
////      }
////    }
////    loop(files.toList, List())
//  }

//  private def parseConfigFile(file: File): Either[String, RequestedFeatureOld] = {
//    val id = file.getName()
////    for {
////      content <- getContent(file).right
////      parsedContent <- parseContent(content, id).right
////    } yield new RequestedFeatureOld(id, parsedContent._1, parsedContent._2, parsedContent._3)
//  }
//
//  private def parseContent(lines: Iterator[String], id: String): Either[String, (String, Option[String], List[String])] = {
//    def loop(category: Option[String], source: Option[String], repositories: List[String]): Either[String, (Option[String], Option[String], List[String])] = {
//      if (lines.hasNext) {
//        lines.next match {
//          case ConfigComment =>
//            loop(category, source, repositories)
//          case ConfigCategory(c) =>
//            if (category.isDefined) {
//              Left("Category is defined twice for %s".format(id))
//            } else {
//              loop(Some(c), source, repositories)
//            }
//          case ConfigRepository(location) =>
//            loop(category, source, repositories :+ location)
//          case ConfigSource(sourceId) =>
//            if (source.isDefined) {
//              Left("Source is defined twice for %s".format(id))
//            } else {
//              loop(category, Some(sourceId), repositories)
//            }
//          case l =>
//            Left("'%s' is an invalid config line for %s".format(l, id))
//        }
//      } else {
//        Right((category, source, repositories))
//      }
//    }
//    loop(None, None, List()) match {
//      case Left(error) =>
//        Left(error)
//      case Right((None, _, _)) =>
//        Left("No category defined for %s".format(id))
//      case Right((_, _, Nil)) =>
//        Left("No repository defined for %s".format(id))
//      case Right((Some(category), source, repositories)) =>
//        Right((category, source, repositories))
//    }
//  }

}

case class RequestedFeatureOld(id: String, category: String, source: Option[String], repositories: List[String])